title = "RDB codebook"


[01_main]
[[01_main.item]]
variable_name = "id"
variable_name_print = "RDB ID"
variable_label = "a 24-character value that uniquely identifies the referendum and corresponds to the [MongoDB `ObjectId`](https://docs.mongodb.com/manual/reference/bson-types/#std-label-objectid) in the RDB"
value_scale = "nominal"
[[01_main.item]]
variable_name = "id_official"
variable_name_print = "Official ID"
variable_label = "the referendum's official identifier assigned by the authorities; this is only guaranteed to be unique per respective jurisdiction"
value_scale = "nominal"
[[01_main.item]]
variable_name = "id_sudd"
variable_name_print = "sudd.ch ID"
variable_label = "the referendum's identifier assigned by [sudd.ch](https://sudd.ch/); multiple referendum's might share the same identifier"
value_scale = "nominal"
[[01_main.item]]
variable_name = "country_code"
variable_name_print = "ISO 3166-1 alpha-2 / ISO 3166-3 alpha-4"
variable_label = "the two- or four-letter code identifying the country in which the referendum took place; an [ISO 3166-3 alpha-4 code](https://en.wikipedia.org/wiki/ISO_3166-3) for historical countries which ceased to exist, otherwise an [ISO 3166-1 alpha-2 code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)"
value_scale = "nominal"
ptype = "vctrs::new_factor(levels = rdb:::val_set$country_code)"
[[01_main.item]]
variable_name = "country_code_long"
variable_name_print = "ISO 3166-1 alpha-3"
variable_label = "the three-letter ISO 3166-1 alpha-3 code identifying the country in which the referendum took place"
value_scale = "nominal"
ptype = "vctrs::new_factor(levels = rdb:::val_set$country_code_long)"
derived_from = [ "country_code" ]
gen_fn = "add_country_code_long"
is_opt = true
[[01_main.item]]
variable_name = "country_code_continual"
variable_name_print = "ISO 3166-1 alpha-2 (continual)"
variable_label = "the current or future [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code of the country where the referendum took place; identical to `country_code` if the country still exists, otherwise the `country_code` of the successor country (the largest one in terms of population if it was succeeded by multiple countries)"
value_scale = "nominal"
ptype = "vctrs::new_factor(levels = rdb:::val_set$country_code_continual)"
derived_from = [ "country_code" ]
gen_fn = "add_country_code_continual"
is_opt = true
[[01_main.item]]
variable_name = "country_name"
variable_name_print = "Country"
variable_label = "the English name of the country in which the referendum took place"
value_scale = "nominal"
ptype = "vctrs::new_factor(levels = rdb:::val_set$country_name)"
derived_from = [ "country_code" ]
gen_fn = "add_country_name"
[[01_main.item]]
variable_name = "country_name_long"
variable_name_print = "Country (full name)"
variable_label = "the official full English name(s) of the country in which the referendum took place"
value_scale = "nominal"
ptype = "vctrs::new_factor(levels = rdb:::val_set$country_name_long)"
derived_from = [ "country_code" ]
gen_fn = "add_country_name_long"
is_opt = true
[[01_main.item]]
variable_name = "subnational_entity_name"
variable_name_print = "Subnational entity"
variable_label = "the English name of the [subnational political entity](https://en.wikipedia.org/wiki/Administrative_division) in which the referendum took place"
applicability_constraint = "level %in% c('local', 'subnational')"
value_scale = "nominal"
[[01_main.item]]
variable_name = "municipality"
variable_name_print = "Municipality"
variable_label = "the municipality in which the referendum took place"
applicability_constraint = "level == 'local'"
value_scale = "nominal"
[[01_main.item]]
variable_name = "un_country_code"
variable_name_print = "UN M49 country code"
variable_label = "the UN M49 code of the country in which the referendum took place"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "un_region_tier_1_code"
variable_name_print = "UN tier-1 region's M49 area code"
variable_label = "the area code of the UN tier-1 region in which the referendum took place"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "un_region_tier_1_name"
variable_name_print = "UN tier-1 region's English name"
variable_label = "the English name of the UN tier-1 region in which the referendum took place"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "un_region_tier_2_code"
variable_name_print = "UN tier-2 region's M49 area code"
variable_label = "the area code of the UN tier-2 region in which the referendum took place"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "un_region_tier_2_name"
variable_name_print = "UN tier-2 region's English name"
variable_label = "the English name of the UN tier-2 region in which the referendum took place"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "un_region_tier_3_code"
variable_name_print = "UN tier-3 region's M49 area code"
variable_label = "the area code of the UN tier-3 region in which the referendum took place"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "un_region_tier_3_name"
variable_name_print = "UN tier-3 region's English name"
variable_label = "the English name of the UN tier-3 region in which the referendum took place"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "un_subregion"
variable_name_print = "UN subregion"
variable_label = "the UN subregion in which the referendum took place; corresponds to the English UN region name of the lowest available tier (except for Northern Europe)"
value_scale = "nominal"
derived_from = [ "country_code" ]
gen_fn = "add_world_regions"
is_opt = true
[[01_main.item]]
variable_name = "level"
variable_name_print = "Political level"
variable_label = "the political level at which the referendum took place"
variable_values = [ "local", "subnational", "national" ]
value_label_prefix = "The referendum took place at the"
value_labels = [ "local political level", "subnational political level", "national political level" ]
value_scale = "ordinal_ascending"
[[01_main.item]]
variable_name = "date"
variable_name_print = "Date"
variable_label = "the date on which the referendum took place"
value_scale = "interval"
ptype = "vctrs::new_date()"
[[01_main.item]]
variable_name = "week"
variable_name_print = "Week number"
variable_label = "the week number (1–53) in which the referendum was held"
value_scale = "interval"
ptype = "integer()"
derived_from = [ "date" ]
gen_fn = "add_period"
is_opt = true
[[01_main.item]]
variable_name = "month"
variable_name_print = "Month number"
variable_label = "the month number (1–12) in which the referendum was held"
value_scale = "interval"
ptype = "integer()"
derived_from = [ "date" ]
gen_fn = "add_period"
is_opt = true
[[01_main.item]]
variable_name = "quarter"
variable_name_print = "Quarter number"
variable_label = "the quarter number (1–4) in which the referendum was held"
value_scale = "interval"
ptype = "integer()"
derived_from = [ "date" ]
gen_fn = "add_period"
is_opt = true
[[01_main.item]]
variable_name = "year"
variable_name_print = "Year"
variable_label = "the year in which the referendum was held"
value_scale = "interval"
ptype = "integer()"
derived_from = [ "date" ]
gen_fn = "add_period"
is_opt = true
[[01_main.item]]
variable_name = "decade"
variable_name_print = "Decade"
variable_label = "the decade in which the referendum was held"
value_scale = "interval"
ptype = "integer()"
derived_from = [ "date" ]
gen_fn = "add_period"
is_opt = true
[[01_main.item]]
variable_name = "century"
variable_name_print = "Century"
variable_label = "the century in which the referendum was held"
value_scale = "interval"
ptype = "integer()"
derived_from = [ "date" ]
gen_fn = "add_period"
is_opt = true
[[01_main.item]]
variable_name = "is_former_country"
variable_name_print = "Former country?"
variable_label = "whether or not the country where the referendum took place ceased to exist and thus has an [ISO 3166-3 alpha-4](https://en.wikipedia.org/wiki/ISO_3166-3) instead of an [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) [`country_code`](#country_code)"
variable_values = [ true, false]
value_scale = "binary"
derived_from = [ "country_code" ]
gen_fn = "add_former_country_flag"
[[01_main.item]]
variable_name = "title_en"
variable_name_print = "Title"
variable_label = "the referendum proposal's English title"
value_scale = "nominal"
[[01_main.item]]
variable_name = "title_de"
variable_name_print = "Titel"
variable_label = "the referendum proposal's German title"
value_scale = "nominal"
[[01_main.item]]
variable_name = "title_fr"
variable_name_print = "Titre"
variable_label = "the referendum proposal's French title"
value_scale = "nominal"
[[01_main.item]]
variable_name = "question"
variable_name_print = "Original question"
variable_label = "the proposal question exactly as it was asked in the referendum"
value_scale = "nominal"
[[01_main.item]]
variable_name = "question_en"
variable_name_print = "Question"
variable_label = "an English translation of [`question`](#question) if it wasn't officially asked in English, otherwise the same as [`question`](#question)"
value_scale = "nominal"
[[01_main.item]]
variable_name = "committee_name"
variable_name_print = "Committee name"
variable_label = "the name of the committee that initiated the referendum proposal"
value_scale = "nominal"
[[01_main.item]]
variable_name = "result"
variable_name_print = "Result"
variable_label = "the result of the referendum"
variable_values = [ "yes", "no" ]
value_label_prefix = "The referendum proposal was"
value_labels = [ "approved", "rejected" ]
value_scale = "binary"
[[01_main.item]]
variable_name = "subterritories_yes"
variable_name_print = "Approving subterritories"
variable_label = "the number of [administrative divisions](https://en.wikipedia.org/wiki/Administrative_division) one level below [`level`](#level) that approved the referendum proposal"
applicability_constraint = "level != 'local'"
ptype = "numeric()"
value_scale = "ratio"
[[01_main.item]]
variable_name = "subterritories_no"
variable_name_print = "Rejecting subterritories"
variable_label = "the number of [administrative divisions](https://en.wikipedia.org/wiki/Administrative_division) one level below [`level`](#level) that rejected the referendum proposal"
applicability_constraint = "level != 'local'"
ptype = "numeric()"
value_scale = "ratio"
[[01_main.item]]
variable_name = "electorate_total"
variable_name_print = "Total electorate"
variable_label = "the total number of people entitled to vote in the referendum"
value_scale = "ratio"
[[01_main.item]]
variable_name = "electorate_abroad"
variable_name_print = "Electorate abroad"
variable_label = "the number of people entitled to vote in the referendum _who are living abroad_; by definition a subset of [`electorate_total`](#electorate_total)"
value_scale = "ratio"
[[01_main.item]]
variable_name = "votes_yes"
variable_name_print = "Yes votes"
variable_label = "the number of votes approving the referendum proposal"
value_scale = "ratio"
[[01_main.item]]
variable_name = "votes_no"
variable_name_print = "No votes"
variable_label = "the number of votes rejecting the referendum proposal"
value_scale = "ratio"
[[01_main.item]]
variable_name = "votes_empty"
variable_name_print = "Empty votes"
variable_label = "the number of votes that did not specify any preference on the referendum proposal"
value_scale = "ratio"
[[01_main.item]]
variable_name = "votes_invalid"
variable_name_print = "Invalid votes"
variable_label = "the number of votes that were invalid"
value_scale = "ratio"
[[01_main.item]]
variable_name = "votes_per_subterritory"
variable_name_print = "Subterritorial votes"
variable_label = "the number of [`votes_yes`](#votes_yes), [`votes_no`](#votes_no), [`votes_empty`](#votes_empty) and [`votes_invalid`](#votes_invalid) per [administrative division](https://en.wikipedia.org/wiki/Administrative_division) one level below [`level`](#level); currently only filled for Swiss referendums on the national level"
applicability_constraint = "level != 'local'"
value_scale = "ratio"
is_nested = true
[[01_main.item]]
variable_name = "turnout"
variable_name_print = "Turnout"
variable_label = "the voter turnout at the referendum"
value_scale = "ratio"
derived_from = [
  "votes_yes",
  "votes_no",
  "votes_empty",
  "votes_invalid",
  "electorate_total"
]
gen_fn = "add_turnout"
is_opt = true
[[01_main.item]]
variable_name = "lower_house_yes"
variable_name_print = "Lower house yes votes"
variable_label = "the number of parliamentarians that approved the referendum proposal in the corresponding parliamentary voting; in [bicameral legislatures](https://en.wikipedia.org/wiki/Bicameralism), this number includes only members of the _lower house_, in [unicameral legislatures](https://en.wikipedia.org/wiki/Unicameralism) all parliamentarians; currently only filled for Swiss referendums on the national level ([National Council](https://en.wikipedia.org/wiki/National_Council_(Switzerland)))"
value_scale = "ratio"
[[01_main.item]]
variable_name = "lower_house_no"
variable_name_print = "Lower house no votes"
variable_label = "the number of parliamentarians that rejected the referendum proposal in the corresponding parliamentary voting; in [bicameral legislatures](https://en.wikipedia.org/wiki/Bicameralism), this number includes only members of the _lower house_, in [unicameral legislatures](https://en.wikipedia.org/wiki/Unicameralism) all parliamentarians; currently only filled for Swiss referendums on the national level ([National Council](https://en.wikipedia.org/wiki/National_Council_(Switzerland)))"
value_scale = "ratio"
[[01_main.item]]
variable_name = "lower_house_abstentions"
variable_name_print = "Lower house abstentions"
variable_label = "the number of parliamentarians that abstained from the corresponding parliamentary voting on the referendum proposal; in [bicameral legislatures](https://en.wikipedia.org/wiki/Bicameralism), this number includes only members of the _lower house_, in [unicameral legislatures](https://en.wikipedia.org/wiki/Unicameralism) all parliamentarians; currently only filled for Swiss referendums on the national level ([National Council](https://en.wikipedia.org/wiki/National_Council_(Switzerland)))"
value_scale = "ratio"
[[01_main.item]]
variable_name = "upper_house_yes"
variable_name_print = "Upper house yes"
variable_label = "the number of parliamentarians that approved the referendum proposal in the corresponding parliamentary voting; applies only to [bicameral legislatures](https://en.wikipedia.org/wiki/Bicameralism) and includes only members of the _upper house_; currently only filled for Swiss referendums on the national level ([Council of States](https://en.wikipedia.org/wiki/Council_of_States_(Switzerland)))"
value_scale = "ratio"
[[01_main.item]]
variable_name = "upper_house_no"
variable_name_print = "Upper house No"
variable_label = "the number of parliamentarians that rejected the referendum proposal in the corresponding parliamentary voting; applies only to [bicameral legislatures](https://en.wikipedia.org/wiki/Bicameralism) and includes only members of the _upper house_; currently only filled for Swiss referendums on the national level ([Council of States](https://en.wikipedia.org/wiki/Council_of_States_(Switzerland)))"
value_scale = "ratio"
[[01_main.item]]
variable_name = "upper_house_abstentions"
variable_name_print = "Upper house abstentions"
variable_label = "the number of parliamentarians that abstained from the corresponding parliamentary voting on the referendum proposal; applies only to [bicameral legislatures](https://en.wikipedia.org/wiki/Bicameralism) and includes only members of the [upper house](https://en.wikipedia.org/wiki/Upper_house); currently only filled for Swiss referendums on the national level ([Council of States](https://en.wikipedia.org/wiki/Council_of_States_(Switzerland)))"
value_scale = "ratio"
[[01_main.item]]
variable_name = "position_government"
variable_name_print = "Government's position"
variable_label = "the government's recommendation on how to vote in the referendum"
variable_values = [ "yes", "no" ]
value_label_prefix = "The government recommends to"
value_labels = [ "approve", "reject" ]
value_label_suffix = "the referendum proposal"
value_scale = "binary"
# topics intro: On each of the following three tiers, coders can assign a maximum of 3 predefined political topics that best classify the referendum proposal.
[[01_main.item]]
variable_name = "topics_tier_1"
variable_name_print = "Top-tier political topics"
variable_name_unnested = "topic_tier_1"
variable_name_unnested_print = "Top-tier political topic"
variable_label = "a maximum of 3 predefined top-tier political topics that best classify the referendum proposal"
is_multi_valued = true
variable_values = [
  "state organisation",
  "foreign policy",
  "security policy",
  "economy",
  "agriculture",
  "public finance",
  "energy",
  "transport and infrastructure",
  "environment and living space",
  "social policy",
  "education and research",
  "culture, religion and media"
]
value_scale = "nominal"
[[01_main.item]]
variable_name = "topics_tier_2"
variable_name_print = "Second-tier political topics"
variable_label = "a maximum of 3 predefined second-tier political topics that best classify the referendum proposal; the presence of a second-tier topic always implies presence of its parent [top-tier topic](#topics_tier_1)"
is_multi_valued = true
variable_name_unnested = "topic_tier_2"
variable_name_unnested_print = "Second-tier political topic"
applicability_constraint = "purrr::map2_lgl(.x = topics_tier_1, .y = topics_tier_2, .f = \\(x, y) all(rdb::infer_topics(topics = y, tier = 1L) %in% x))"
variable_values = [
  "national identity",
  "political system",
  "institutions",
  "citizens' rights",
  "federalism",
  "legal system",
  "position on foreign policy",
  "European policy",
  "international organisations",
  "development cooperation",
  "bilateral treaties",
  "foreign trade policy",
  "diplomacy",
  "Swiss abroad",
  "public security",
  "army",
  "national economic supply",
  "economic policy",
  "employment",
  "finance",
  "tourism and leisure",
  "agricultural policy",
  "livestock",
  "crop production",
  "forestry",
  "fishing, hunting and pets",
  "taxation",
  "financial system",
  "public expenditure",
  "budget cuts and remediation measures",
  "energy policy",
  "nuclear energy",
  "hydro-electric power",
  "alternative energy",
  "oil and gas",
  "transport policy",
  "road transport",
  "rail transport",
  "air transport",
  "shipping",
  "post",
  "telecommunications",
  "soil",
  "housing",
  "environment",
  "health",
  "social security",
  "social groups",
  "education policy",
  "schools",
  "universities",
  "research",
  "professional and vocational education",
  "cultural policy",
  "language policy",
  "religion, churches",
  "sport",
  "media and communication"
]
value_scale = "nominal"
[[01_main.item]]
variable_name = "topics_tier_3"
variable_name_print = "Third-tier political topics"
variable_name_unnested = "topic_tier_3"
variable_name_unnested_print = "Third-tier political topic"
variable_label = "a maximum of 3 predefined third-tier political topics that best classify the referendum proposal; the presence of a third-tier topic always implies presence of its parent [second-tier topic](#topics_tier_2) and grandparent [top-tier topic](#topics_tier_1)"
is_multi_valued = true
applicability_constraint = "purrr::map2_lgl(.x = topics_tier_2, .y = topics_tier_3, .f = \\(x, y) all(rdb::infer_topics(topics = y, tier = 2L) %in% x)) & purrr::map2_lgl(.x = topics_tier_1, .y = topics_tier_3, .f = \\(x, y) all(rdb::infer_topics(topics = y, tier = 1L) %in% x))"
variable_values = [
  "constitution",
  "procedure for constitutional reform",
  "legislative procedure",
  "electoral system",
  "government, administration",
  "parliament",
  "courts",
  "national bank",
  "citizens' initiatives",
  "referendum",
  "voting rights",
  "territorial questions",
  "intergovernmental relations",
  "division of tasks",
  "international law",
  "fundamental rights",
  "citizenship",
  "private law",
  "criminal law",
  "data protection",
  "neutrality",
  "independence",
  "good offices",
  "EFTA",
  "EU",
  "EEA",
  "other European organisations",
  "UN",
  "other international organisations",
  "export promotion",
  "customs",
  "civil protection",
  "state security",
  "police",
  "armed forces in general",
  "military organisation",
  "arms",
  "military facilities",
  "conscientious objection, civilian service",
  "abolition of the armed forces",
  "military training",
  "international deployment",
  "short-term economic policy",
  "competition policy",
  "structural policy",
  "pricing policy",
  "consumer protection",
  "employment conditions",
  "working hours",
  "industrial relations",
  "employment policy",
  "monetary policy",
  "banks, stock exchange, insurance",
  "tourism",
  "hospitality",
  "lottery and gambling",
  "tax policy",
  "tax system",
  "direct taxation",
  "indirect taxation",
  "urban transport",
  "transit traffic",
  "road construction",
  "heavy traffic",
  "goods traffic",
  "passenger traffic",
  "spatial planning",
  "land law",
  "tenancy issues",
  "building of residential housing, property ownership",
  "environmental policy",
  "noise protection",
  "air quality control",
  "water pollution control",
  "soil protection",
  "waste",
  "protection of nature and cultural heritage",
  "animal protection",
  "health policy",
  "medical research and technology",
  "medicines",
  "addictive substances",
  "reproductive medicine",
  "pension insurance",
  "disability insurance",
  "occupational benefits provision",
  "health and accident insurance",
  "maternity insurance",
  "unemployment insurance",
  "compensation for loss of earnings for persons on military service or civil protection duty",
  "welfare",
  "immigration policy",
  "refugees",
  "status of women",
  "family policy",
  "children and young people",
  "senior citizens",
  "persons with disabilities",
  "homosexuals",
  "genetic engineering",
  "animal testing",
  "media policy",
  "press",
  "radio, television and electronic media",
  "freedom of the media"
]
value_scale = "nominal"
[[01_main.item]]
variable_name = "remarks"
variable_name_print = "Remarks"
variable_label = "a free text field with additional information about the referendum"
value_scale = "nominal"
[[01_main.item]]
variable_name = "files"
variable_name_print = "File metadata"
variable_label = """
metadata about files attached to the referendum, including

- `date_time_attached`: the date and time on which the file was attached to the referendum's data entry
- `is_deleted`: whether or not the file has been deleted since it was attached
- `file_name`: the filename as it appears when the file is downloaded
- `file_size`: the file's size in bytes
- `s3_object_key`: the key uniquely identifying the file in the RDB [Amazon S3 bucket](https://en.wikipedia.org/wiki/Amazon_S3#Design); the file can be downloaded by feeding this key to [`rdb::download_file_attachment()`](https://rdb.rpkg.dev/reference/download_file_attachment.html)"""
value_scale = "undefined"
is_nested = true
[[01_main.item]]
variable_name = "url_sudd"
variable_name_print = "sudd.ch URL"
variable_label = "the URL of the corresponding entry on [sudd.ch](https://sudd.ch/)"
value_scale = "nominal"
derived_from = [ "id_sudd" ]
gen_fn = "add_urls"
is_opt = true
[[01_main.item]]
variable_name = "url_swissvotes"
variable_name_print = "Swissvotes URL"
variable_label = "the URL of the corresponding entry on [swissvotes.ch](https://swissvotes.ch/)"
value_scale = "nominal"
derived_from = [ "id_official" ]
gen_fn = "add_urls"
is_opt = true
[[01_main.item]]
variable_name = "sources"
variable_name_print = "Sources"
variable_label = "information about the source(s) of the referendum data like additional URLs or other references"
value_scale = "nominal"
[[01_main.item]]
variable_name = "is_draft"
variable_name_print = "Draft?"
variable_label = "whether or not the entry is marked as a draft in the database"
variable_values = [ true, false]
value_label_prefix = "The entry is"
value_labels = [ "marked as a draft", "not marked as a draft" ]
value_scale = "binary"
[[01_main.item]]
variable_name = "date_time_created"
variable_name_print = "Creation date/time"
variable_label = "the date and time on which the referendum's data entry was created"
value_scale = "interval"
ptype = "vctrs::new_datetime()"
[[01_main.item]]
variable_name = "date_time_last_edited"
variable_name_print = "Updated date/time"
variable_label = "the date and time on which the referendum's data entry was last modified"
value_scale = "interval"
ptype = "vctrs::new_datetime()"
[[01_main.item]]
variable_name = "archive"
variable_name_print = "Archived data"
variable_label = "the referendum's data from an earlier, obsolete RDB state"
value_scale = "undefined"
is_nested = true
[[01_main.item]]
variable_name = "type"
variable_name_print = "Type"
variable_label = "the institutional type of direct democracy which the referendum is an instance of"
variable_values = [
  "mandatory referendum",
  "optional referendum",
  "counter proposal",
  "citizens' initiative",
  "governmental referendum",
  "citizens' assembly",
  "recall" ]
value_labels = [
  "a referendum that was automatically triggered by certain legal conditions, usually found in the constitution",
  "a referendum against a law passed by the parliament that came about because the quorum of citizen opposition was met (usually a certain number of signatures) within a specified period after the resolution was passed",
  "a counter proposal by the government or parliament to another referendum",
  "a referendum launched by citizens, usually via a signature collection",
  "a referendum launched by the government",
  "a citizens' assembly, usually in person where people vote by raising their hands",
  "a recall of all members of a political institution/body"
]
value_scale = "nominal"


[02_institutional.01_status]
title = "Official Status"
[[02_institutional.01_status.item]]
variable_name = "inst_legal_basis_type"
variable_name_print = "Legal basis type"
variable_label = "the type of the legal basis of the referendum [`type`](#type)"
variable_values = [ "non-official", "ad-hoc", "official" ]
value_label_prefix = "The referendum [`type`](#type) has"
value_labels = [
  "no legal basis",
  "a legal basis which was specifically created for it",
  "a legal basis that wasn’t specifically created for it"
]
value_default = "official"
value_scale = "ordinal_ascending"
[[02_institutional.01_status.item]]
variable_name = "inst_has_urgent_legal_basis"
variable_name_print = "Urgent legal basis?"
variable_label = "whether or not the legal basis of the referendum [`type`](#type) was adopted urgently, i.e. in an abridged procedure"
applicability_constraint = "inst_trigger_actor %in% c('government', 'president', 'monarch', 'parliament')"
variable_values = [ true, false]
value_label_prefix = "The legal basis of the referendum [`type`](#type) was adopted in a"
value_labels = [ "abridged procedure (urgent)", "normal procedure" ]
value_default = false
value_scale = "binary"
[[02_institutional.01_status.item]]
variable_name = "inst_is_binding"
variable_name_print = "Binding?"
variable_label = "whether the result of the referendum [`type`](#type) has binding force or the decision of the voters may be disregarded"
variable_values = [ true, false]
value_label_prefix = "The result of the referendum [`type`](#type) is"
value_labels = [
  "binding for the legislator",
  "only consultative, i.e. the legislator does not have to follow the decision of the voters"
]
value_default = true
value_scale = "binary"
[[02_institutional.01_status.item]]
variable_name = "inst_is_counter_proposal"
variable_name_print = "Counterproposal?"
variable_label = "whether or not the referendum [`type`](#type) is a counterproposal to a citizen’s (or other) initiative"
variable_values = [ true, false]
value_label_prefix = "The referendum [`type`](#type) is"
value_labels = [
  "a counterproposal to a citizen’s (or other) initiative",
  "not a counterproposal to a citizen’s (or other) initiative"
]
value_scale = "binary"
[[02_institutional.01_status.item]]
variable_name = "inst_is_assembly"
variable_name_print = "Assembly?"
variable_label = "whether or not the referendum [`type`](#type) is held as an assembly (all voters at the same time and place; physical presence at the assembly is required to be able to vote; usually voting means raising one’s hand)"
variable_values = [ true, false]
value_label_prefix = "The referendum [`type`](#type) is"
value_labels = [
  "a counterproposal to a citizen’s (or other) initiative",
  "not a counterproposal to a citizen’s (or other) initiative"
]
value_scale = "binary"


[02_institutional.02_trigger]
title = "Trigger"
[[02_institutional.02_trigger.item]]
variable_name = "inst_trigger_type"
variable_name_print = "Trigger type"
variable_label = "the way the referendum [`type`](#type) is triggered; completely dependent on [`inst_trigger_actor`](#inst_trigger_actor)"
variable_values = [ "automatic", "top down", "bottom up" ]
value_label_prefix = "The referendum [`type`](#type) is triggered by"
value_labels = [
  "a constitutional/legal requirement",
  "an institution of the political elite like the monarch/president/government, the parliament, a territorial unit, the UN or another institution",
  "citizen demand (e.g. a signature collection)" ]
value_scale = "nominal"
[[02_institutional.02_trigger.item]]
variable_name = "inst_trigger_actor"
variable_name_print = "Trigger actor"
variable_label = "the actor that triggers the referendum [`type`](#type)"
variable_values = [ "citizens", "constitution", "law", "parliament", "government", "president", "monarch", "territorial unit", "UN", "other institution" ]
value_label_prefix = "The referendum [`type`](#type) is triggered by"
value_labels = [
  "a direct citizen demand (usually a signature collection)",
  "a constitutional requirement",
  "a legal requirement",
  "the parliament",
  "the government or prime minister",
  "the president",
  "the monarch",
  "a province or municipality",
  "the United Nations (UN) or one of its organs",
  "another institution such as the church or a state agency"
]
value_default = "constitution"
value_scale = "nominal"
[[02_institutional.02_trigger.item]]
variable_name = "inst_trigger_actor_level"
variable_name_print = "Tigger actor's political level"
variable_label = "the political [`level`](#level) of [`inst_trigger_actor`](#inst_trigger_actor) in comparison to [`level`](#level)"
variable_values = [ "lower", "equal", "higher" ]
value_labels = [
  "a lower political level triggers a referendum on one of the higher political levels",
  "the trigger actor and the referendum are on the same political level",
  "a higher political level triggers a referendum on one of the lower political levels"
]
value_default = "equal"
value_scale = "ordinal_ascending"
[[02_institutional.02_trigger.item]]
variable_name = "inst_trigger_threshold"
variable_name_print = "Trigger threshold"
variable_label = "the threshold of support among [`inst_trigger_actor`](#inst_trigger_actor) that has to be reached in order to trigger the referendum [`type`](#type)"
applicability_constraint = "inst_trigger_actor %in% c('citizens', 'parliament', 'territorial unit')"
value_scale = "nominal"
[[02_institutional.02_trigger.item]]
variable_name = "inst_trigger_time_limit"
variable_name_print = "Trigger time limit"
variable_label = "the time limit in which [`inst_trigger_threshold`](#inst_trigger_threshold) (usually a minimum number of signatures) has to be reached in order to trigger the referendum [`type`](#type)"
applicability_constraint = "inst_trigger_actor %in% c('citizens', 'territorial unit')"
value_default = "none"
value_scale = "nominal"


[02_institutional.03_object]
title = "Object"
[[02_institutional.03_object.item]]
variable_name = "inst_object_type"
variable_name_print = "Object type"
variable_label = "the type of the object the referendum [`type`](#type) refers to"
variable_values = [ "question", "legal text (general proposal)", "legal text (formulated proposal)", "institution", "person", "principle" ]
value_labels = [
  "a question which can be answered with yes or no (used as fallback option if nothing else applies)",
  "a general proposal of a legal text, meaning the proposal is not formulated in a definite way, and therefore, if approved, needs to be implemented and concretized in a further legislative process",
  "a precisely formulated legal text which, if approved, will directly enter into force",
  "a recall of all members of a particular institution/body",
  "an appointment of a single person",
  "a question about what direction to take on a particular issue/topic, but without a proposed legal text; e.g., \"Should there be a total revision of our constitution?\""
]
value_default = "legal text (formulated proposal)"
value_scale = "nominal"
[[02_institutional.03_object.item]]
variable_name = "inst_object_author"
variable_name_print = "Object "
variable_label = "the actor that defines the text/content of [`inst_object_type`](#inst_object_type)"
applicability_constraint = "inst_object_type %in% c('question', 'legal text (general proposal)', 'legal text (formulated proposal)', 'principle')"
variable_values = [ "citizens", "parliament", "government", "president", "monarch", "territorial unit", "UN", "other institution" ]
value_labels = [
  "citizens (usually a small group initiating a citizen demand)",
  "the parliament",
  "the government or prime minister",
  "the president",
  "the monarch",
  "a province or municipality",
  "the United Nations (UN) or one of its organs",
  "another institution such as the church or a state agency"
]
value_scale = "nominal"
[[02_institutional.03_object.item]]
variable_name = "inst_object_legal_level"
variable_name_print = "Object's legal level"
variable_label = "the legal level of [`inst_object_type`](#inst_object_type)"
applicability_constraint = "inst_object_type %in% c('legal text (general proposal)', 'legal text (formulated proposal)')"
variable_values = [ "ordinance", "treaty", "law", "constitution", "international treaty" ]
value_labels = [
  "an ordinance, i.e. a legal norm based on a law or the constitution",
  "a domestic treaty, e.g. an agreement between the constituent states of a republic",
  "a law, i.e. a legal norm based on the constitution and created by the legislative",
  "the constitution, i.e. the aggregate of fundamental principles or established precedents that constitute the legal basis of a state and commonly determine how that state is to be governed",
  "an international treaty, i.e. a bilateral or multilateral agreement or an accession to and international organization"
]
value_default = "constitution"
value_scale = "nominal"
[[02_institutional.03_object.item]]
variable_name = "inst_object_revision_extent"
variable_name_print = "Object revision extent"
variable_label = "the extent of revision of [`inst_object_type`](#inst_object_type) which can be achieved within one referendum"
applicability_constraint = "inst_object_type %in% c('legal text (general proposal)', 'legal text (formulated proposal)')"
variable_values = [ "partial", "total", "both" ]
value_labels = [
  "only parts of the concerned legal text can be revised at the same time",
  "only the entirety of the legal text can be changed at the same time",
  "both, parts and the entirety of the legal text, can be changed at the same time"
]
value_default = "partial"
value_scale = "nominal"
[[02_institutional.03_object.item]]
variable_name = "inst_object_revision_modes"
variable_name_print = "Object revision modes"
variable_name_unnested = "inst_object_revision_mode"
variable_name_unnested_print = "Object revision mode"
variable_label = "the mode(s) of revision that [`inst_object_type`](#inst_object_type) allows"
is_multi_valued = true
variable_values = [ "introduce", "revise", "abrogate" ]
value_label_prefix = "With this instrument, it is possible to"
value_labels = [
  "introduce an entirely new text/concept",
  "change some parts of the legal text/...",
  "strike parts of the legal text / to recall a person/institution"
]
value_default = [ "introduce", "revise", "abrogate" ]
value_scale = "nominal"
[[02_institutional.03_object.item]]
variable_name = "inst_is_divisible"
variable_name_print = "Divisible?"
variable_label = "whether or not [`inst_object_type`](#inst_object_type) (the proposed legal text) may be split up so voters can decide upon these parts separately"
applicability_constraint = "inst_object_type %in% c('question', 'legal text (general proposal)', 'legal text (formulated proposal)')"
variable_values = [ true, false ]
value_labels = [
  "may be split up",
  "may not be split up"
]
value_label_prefix = "The proposed legal text"
value_default = [ "{NA}" ]
value_scale = "binary"
[[02_institutional.03_object.item]]
variable_name = "inst_is_variable"
variable_name_print = "Variable?"
variable_label = "whether or not the proposed legal text may be presented in two or more (alternative) variants for voters to choose amongst"
applicability_constraint = "inst_object_type %in% c('question', 'legal text (general proposal)', 'legal text (formulated proposal)')"
variable_values = [ true, false ]
value_labels = [
  "may be presented in variants",
  "may not be presented in variants"
]
value_label_prefix = "The proposed legal text"
value_default = [ "{NA}" ]
value_scale = "binary"
[[02_institutional.04_other.item]]
variable_name = "inst_topics_only"
variable_name_print = "Allowed topics"
variable_name_unnested = "inst_topic_only"
variable_name_unnested_print = "Allowed topic"
variable_label = "the legal topic(s) to which the referendum [`type`](#type) is limited"
applicability_constraint = "inst_topics_excluded %>% purrr::map_lgl(rlang::is_empty)"
is_multi_valued = true
variable_values = [
  "infrastructural acts",
  "territorial questions",
  "competence shifts",
  "financial acts",
  "financial acts (expenses)",
  "financial acts (taxes)",
  "financial acts (obligations)",
  "treaties",
  "total revisions of the constitution"
]
value_label_prefix = "The referendum [`type`](#type) is limited to"
value_labels = [
  "TODO",
  "TODO",
  "TODO",
  "TODO",
  "TODO",
  "TODO",
  "TODO",
  "TODO (automatically limited to if `inst_object_legal_level == \"law\"`)",
  "TODO"
]
value_default = [ "{NA_character}" ]
value_scale = "nominal"
[[02_institutional.04_other.item]]
variable_name = "inst_topics_excluded"
variable_name_print = "Excluded topics"
variable_name_unnested = "inst_topic_excluded"
variable_name_unnested_print = "Excluded topic"
variable_label = "the legal topic(s) that are excluded from the referendum [`type`](#type)"
applicability_constraint = "inst_topics_only %>% purrr::map_lgl(rlang::is_empty)"
is_multi_valued = true
variable_values = [
  "jus cogens",
  "international treaties",
  "pardons",
  "personnel appointments",
  "budgets",
  "financial matters",
  "everything within parliamentary competence"
]
value_labels = [
  "TODO",
  "TODO",
  "TODO",
  "TODO",
  "TODO",
  "TODO",
  "TODO"
]
value_label_suffix = "is exluded from the referendum [`type`](#type)"
value_default = [ "jus cogens" ]
value_scale = "nominal"
[[02_institutional.04_other.item]]
variable_name = "inst_quorum_turnout"
variable_name_print = "Turnout quorum"
variable_label = "the minimum percentage of the [`electorate_total`](#electorate_total) that have to participate in the referendum [`type`](#type) in order for it to be passed"
value_scale = "nominal" # should actually be "ratio" but we'd have to properly recode the values first
[[02_institutional.04_other.item]]
variable_name = "inst_quorum_approval"
variable_name_print = "Approval quorum"
variable_label = "the minimum number of voters that have to approve the referendum [`type`](#type) in order for it to be passed"
variable_values = [ "simple majority", "qualified majority", "double majority" ]
value_labels = [
  "> 50 % of the voters have to approve the referendum proposal",
  "a percentage higher than > 50 % of the voters has to approve the referendum proposal",
  "two simultaneous quorums of > 50 % or higher of the voters apply"
]
value_default = "simple majority"
value_scale = "nominal"
[[02_institutional.04_other.item]]
variable_name = "inst_has_precondition"
variable_name_print = "Institutional precondition?"
variable_label = "whether or not an institutional actor must take a preconditional decision in order for the referendum [`type`](#type) to be held"
variable_values = [ true, false ]
value_labels = [
  "an institutional actor must take a preconditional decision",
  "no institutional actor must take a preconditional decision"
]
value_label_suffix = "in order for the referendum [`type`](#type) to be held"
value_scale = "binary"
[[02_institutional.04_other.item]]
variable_name = "inst_precondition_actor"
variable_name_print = "Institutional precondition actor"
variable_label = "the actor that must take a preconditional decision in order for the referendum [`type`](#type) to be held"
applicability_constraint = "isTRUE(inst_has_precondition)"
variable_values = [ "parliament", "government", "president", "UN", "parliament and government", "parliament and president", "central government and SPLM" ]
value_labels = [
  "the parliament",
  "the government or prime minister",
  "the president",
  "the United Nations (UN) or one of its organs",
  "the parliament and the government or prime minister",
  "the parliament and the president",
  "the central government and the [Sudan People's Liberation Movement](https://en.wikipedia.org/wiki/Sudan_People's_Liberation_Movement)"
]
value_default = "parliament"
value_scale = "nominal"
[[02_institutional.04_other.item]]
variable_name = "inst_precondition_decision"
variable_name_print = "Institutional precondition decision"
variable_label = "the decision that [`inst_precondition_actor`](#inst_precondition_actor) has taken"
variable_values = [ "yes", "no" ]
value_labels = [
  "affirmative answer (e.g. \"Yes, we will hold a vote that has been requested by citizens.\")",
  "negative answer (e.g. \"No, we will not implement the demands of a citizens’ initiative voluntarily.\")"
]
value_scale = "binary"
